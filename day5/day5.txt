배열 : 같은 자료형인 저장공간의 나열

	동일한 자료형(Data Type)의 데이터를 연속된 공간에 저장하기 위한 자료구조
	즉, 연관된 데이터를 그룹화하여 묶어준다고 생각하면 된다. 

	*연관된 데이터를 저장하기 위한 변수의 선언을 줄여주며, 
	반복문 등을 이용하여 계산과 같은 과정을 쉽게 처리할 수 있다.

배열의 선언
	1. 자료형[] 배열명 = {값1, 값2, 값3,....};
	2. 자료형[] 배열명 = new 자료형[칸수];

new
	뒤에 나오는 것을 Heap메모리에 할당하라는 명령어이다.
	일단은 새로 만들게 메모리 공간 좀 확보해! 정도로 이해

	※방번호는 인덱스(index)라고 표현하며, 0부터 시작한다.
	※배열은 시작주소를 가지고 있기 때문에 인덱스는 0부터 시작한다.

배열의 사용
	int[] arData = new int[5];
	
	arData[0] = 10;		//저장공간
	arData[1] + 9;		//값
	arData[3] = arData[0] - 9;	//저장공간, 값
	arData[10] = 10;	//오류

length(상수)
	배열을 선언하면 length라는 상수가 자동으로 선언된다.
	할당한 배열의 길이를 가지고 있다.
	배열명.length로 접근한다.

	arData.length == 5


* for-each 문
	for(자료형 변수 : 배열){
		반복 실행할 문장;
	}
----------------------------------------------------------------------------------
2차원 배열 : 배열 안에 배열
	
	1차원 배열을 여러 개 선언하면 이름도 여러 개 생긴다.
	따라서, 1차원 배열 여러 개를 2차원 배열 한 개로 선언할 수 있다.
	2차원 배열에서 한 번 접근하면 주소값이고, 두 번 접근해야 값이다.
	2차원 배열은 대괄호가 2개이다.

2차원 배열 선언
	자료형[][] 배열명 = {{값1, 값2, 값3,...}, {값4, 값5, 값6,...}, ...};
	자료형[][] 배열명 = new 자료형[행][열];

	int[][] arrData = new int[2][3];

	   □	arrData		배열의 시작 주소
	  □□	arrData[n]	한 번 접근하면 행, 주소값
	□□□ □□□	arrData[n][m]	두 번 접근하면 열, 값

	arrData.length : 행의 길이
	arrData[n].length : n행의 열 길이

2차원 배열 사용
	int[] arData = {9,8,7};
	int[][] arrData = {{1,3,4}, {5,3,2}};

	arrData[0][2] = 10;	//저장공간
	arrData[0][1] + 9;	//값
	arrData[1];		//주소값
	arrData[1] = arData;	//저장공간(주소), 값(주소값)
	arrData[1][0] = arData[1] + 9;	// 저장공간, 값

2중 for문(nested for)
	for(초기식; 조건식; 증감식){
		for(초기식; 조건식; 증감식){
			반복할 문장
		}
	}