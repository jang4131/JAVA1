메소드
	이름 뒤에 소괄호.
	단, 키워드()는 메소드가 아니다!
	ex) for(), if(), switch(), while()....는 메소드가 아니다.

메소드 선언
	(1)리턴타입 (2)메소드명(자료형 (3)매개변수명,....){
		(4)실행할 문장;
		(5)return 리턴값;
	}


	(1) 생략이 가능하다.
	(2) 동사로 작성한다(연필(매개변수)을 쓴다(메소드))
	(3) 외부에서 전달받을 값의 타입과 개수를 설정하고 받을 준비를 해준다.
	    생략이 가능하지만, 생략시 값을 전달받을 수 없다.
	(4) 생략이 가능하다.
	(5) 생략이 가능하다.

메소드 선언시 주의사항
	선언은 반드시 메소드 밖에서,
	사용은 반드시 메소드 안에서 한다.

메소드 사용
	메소드명(값,...)

	매개변수의 타입과 선언된 순서에 맞춰서 알맞는 값을 전달하여 사용한다.
	리턴타입이 void이면 실행메소드이며 값으로 봐서는 안된다.
	하지만 리턴이 있다면 사용한 부분 통채로를 값으로 봐야 한다.

메소드 선언 순서
예)두 정수의 덧셈 메소드

1. 메소드 이름을 생각한다.
	add(){}

2. 매개변수를 생각한다.
	add(int num1, int num2){}

3. 실행할 문장을 생각한다.
	add(int num1, int num2){
		int result = num1 + num2;
	}

4. 리턴 값을 생각한다.
	add(int num1, int num2){
		int result = num1 + num2;
		return result;
	}

5. 리턴타입을 결정한다.
	int add(int num1, int num2){
		int result = num1 + num2;
		return result;
	}	

메소드를 사용하는 목적
	1. 재사용의 목적. 특정성을 부여해서는 안된다.	
	2. 소스코드 간결화

리턴을 사용해야 할 때
	- 메소드 안에서 모든 작업이 끝나지 않았을 때
	- 사용하는 부분에 결과값을 전달해야 할 때

리턴을 사용하지 않을 때
	- 메소드 안에서 모든 작업이 끝났을 때
	- 사용하는 부분에 결과값을 전달할 필요가 없을 때

※ 메소드 안에서 모든 것을 구현하려고 하면, 특정성이 부여된다.
   따라서 입력받을 값은 매개변수로 받아오고, 결과 값은 리턴해주는 연습이 필요하다.
   메소드 선언시, 사용할 때를 생각하며 설계한다.









	













