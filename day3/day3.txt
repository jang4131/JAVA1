쉬프트 연산자 -> 삼성 실무 면접 좌 쉬프트시 값이 커지나? 그럴수도 아닐수도
		<<(좌쉬프트)	: a << b, a를 b만큼 좌로 비트이동
		>>(우쉬프트)	: a >> b, a를 b만큼 우로 비트이동

		빈 자리는 0으로 채워지고(음수는 1로 채워진다)
		비트 수를 넘어가면 자동으로 잘린다.
		>>>를 사용하면 양수든 음수든 빈 자리가 모두 0으로 채워진다.

----------------------------------------------------------------------
조건식
	결과가 참 또는 거짓 중 하나가 나오는 식

논리형
	JAVA에서는 참을 true, 거짓을 false라는 값으로 표현한다.
	이 값들을 담을 수 있는 저장공간의 종류는 boolean이며, 1byte이다.
	
	boolean isTrue = false;


	관계 연산자
		==	: 같다
		!=	: 같지 않다
		>, <	: 초과, 미만
		>=, <=	: 이상, 이하

	논리 연산자
		&& AND	: A && B, 두 조건식 모두 참이면 참
		|| OR	: A || B, 두 조건식 중 하나라도 참이면 참

	단항 연산자
		! NOT	: !A, A 조건식이 참이면 거짓으로, 거짓이면 참으로 변경
---------------------------------------------------------------------
삼항 연산자(? :)
	조건식 ? 참 : 거짓
	
	참과 거짓 자리에 각각 값만 작성할 수 있고,
	조건식에 결과에 따라서 참 또는 거짓 자리에 작성한 값이 나온다.
	삼항 연산자는 통채로가 참 또는 거짓에 작성한 값이다.

------------------------------------------------------------------------------------
제어문 - 조건문, 반복문
	조건문
		if
	
if(조건식){
	실행할 문장
위의 조건식과 상관 없이 무조건 검사
}	
if(조건식){
	실행할 문장
}	
if(조건식){
	실행할 문장
}	

if(조건식){
	실행할 문장
위의 조건식이 거짓일 때만 검사
}else if(조건식){
	실행할 문장
}else{
	실행할 문장
}


		switch

	switch(변수명){
	case 값1:
		실행할 문장
		break;
	case 값2:
		실행할 문장
		break;
	case 값3:
		실행할 문장
		break;
	case 값4:
		실행할 문장
		break;
	...
	default:
		실행할 문장
	}

-----------------------------------------------------------------
삼항 연산자와 if문의 차이
	삼항 연산자는 속도가 if문에 비해서 빠르다. 하지만, 메모리를 더 사용한다.
	if문은 삼항 연산자보다 느리지만, 메모리를 덜 사용한다.

if문과 switch문의 차이
	하나의 변수에 여러 개의 값이 담기는 상황에서
	같은지만 비교할 때에는 switch문을 사용한다.
	하지만, 다양한 관계연산자와 논리연산자를 사용해야 할 때에는
	if문을 사용한다.
---------------------------------------------------------------------
대입 연산자(누적 연산자, 복합 대입 연산자)
	int money = 10000;
	money = money - 1000;
	money -= 1000;
	syso(money);

	int data = 10;
	data += 1;
	data++;

증감 연산자(++, --)
	전위형 : 해당 줄부터 적용
		++data

	후위형 : 다음 줄부터 적용
		data++

반복문
	for문

	for(초기식; 조건식; 증감식){
		실행할 문장;
	}

기타연산자
	break;
		해당 중괄호 영역을 탈출한다(닫는 중괄호로 이동).

	continue;
		다음 반복으로 넘어간다(스킵).
		밑의 문장을 실행시키지 않기 위해서 사용한다.
---------------------------------------------------------------------------
- 무한 반복 일때 자주 사용
while문(선평가 후실행)
	while(조건식){
		실행할 문장;
	}

	몇 번 반복할 지 알 수 없을 때.
	무한 반복을 한 후 특정 조건에 break를 사용해서 탈출한다.


do~while문(선실행 후평가)
	do{
		실행할 문장;
	}while(조건식);


	무조건 한 번은 실행한다.